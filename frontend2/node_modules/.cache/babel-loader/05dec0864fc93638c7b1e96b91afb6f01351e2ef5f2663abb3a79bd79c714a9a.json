{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\helwes04\\\\Documents\\\\GitHub\\\\workoutproject\\\\frontend2\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { decodeToken } from '../utils/decodeToken';\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID for generating unique IDs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:3000' // Set your base URL here\n});\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState();\n  const [loading, setLoading] = useState(true);\n  const [categories, setCategories] = useState([]); // Initialize as an array\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      try {\n        const decodedToken = decodeToken(token);\n        setUser({\n          username: decodedToken.username\n        });\n      } catch (error) {\n        console.error('Invalid token:', error);\n        logout();\n      }\n    }\n    setLoading(false);\n    loadCategories(); // Load categories when the component mounts\n  }, []);\n  const loadCategories = async () => {\n    const localCategories = localStorage.getItem('categoryEntries');\n    if (localCategories) {\n      setCategories(JSON.parse(localCategories));\n    } else {\n      console.log('Fetching categories from the server');\n    }\n  };\n  const fetchCategories = async () => {\n    try {\n      const response = await axiosInstance.get('/api/categories/entries');\n      const categoryData = response.data || [];\n      setCategories(categoryData); // Ensure the response is an array\n      localStorage.setItem('categoryEntries', JSON.stringify(categoryData));\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      setCategories([]); // Fallback to an empty array on error\n    }\n  };\n  const login = async (username, password) => {\n    try {\n      const response = await axiosInstance.post('/api/auth/login', {\n        username,\n        password\n      });\n      const token = response.data.token;\n      localStorage.setItem('token', token);\n      axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      const decodedToken = decodeToken(token);\n      setUser({\n        username: decodedToken.username\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n  const register = async (username, password) => {\n    try {\n      await axiosInstance.post('/api/auth/register', {\n        username,\n        password\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete axiosInstance.defaults.headers.common['Authorization'];\n    setUser(null);\n  };\n  const fetchCalendarEntries = async () => {\n    try {\n      const response = await axiosInstance.get('/api/calendar/entries');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching calendar entries:', error);\n      throw error;\n    }\n  };\n  const fetchCategoryEntries = async () => {\n    try {\n      const response = await axiosInstance.get('/api/categories/entries');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching category entries:', error);\n      throw error;\n    }\n  };\n  const addCalendarEntry = async entry => {\n    console.log('entry:', entry);\n    try {\n      const response = await axiosInstance.post('/api/calendar/entries', entry);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding calendar entry:', error);\n      throw error;\n    }\n  };\n  const addCategory = async category => {\n    const newCategory = {\n      ...category,\n      id: uuidv4()\n    };\n    try {\n      const response = await axiosInstance.post('/api/categories/entries', newCategory);\n      setCategories(prevCategories => {\n        const updatedCategories = [...prevCategories, response.data];\n        localStorage.setItem('categoryEntries', JSON.stringify(updatedCategories));\n        return updatedCategories;\n      }); // Update the categories state\n      return response.data;\n    } catch (error) {\n      console.error('Error adding category:', error);\n      throw error;\n    }\n  };\n  const updateCalendarEntry = async (id, entry) => {\n    try {\n      const response = await axiosInstance.put(`/api/calendar/entries/${id}`, entry);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating calendar entry:', error);\n      throw error;\n    }\n  };\n  const deleteCalendarEntry = async id => {\n    try {\n      const response = await axiosInstance.delete(`/api/calendar/entries/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting calendar entry:', error);\n      throw error;\n    }\n  };\n  const deleteCategory = async id => {\n    try {\n      const response = await axiosInstance.delete(`/api/categories/entries/${id}`);\n      setCategories(prevCategories => {\n        const updatedCategories = prevCategories.filter(category => category.id !== id);\n        localStorage.setItem('categoryEntries', JSON.stringify(updatedCategories));\n        return updatedCategories;\n      }); // Update the categories state\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting category:', error);\n      throw error;\n    }\n  };\n  const fetchTasks = async () => {\n    try {\n      const response = await axiosInstance.get('/api/tasks/entries');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      throw error;\n    }\n  };\n  const addTask = async entry => {\n    console.log('entry:', entry);\n    try {\n      const response = await axiosInstance.post('/api/tasks/entries', entry);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding task:', error);\n      throw error;\n    }\n  };\n  const updateTask = async (id, entry) => {\n    try {\n      const response = await axiosInstance.put(`/api/tasks/entries/${id}`, entry);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating task:', error);\n      throw error;\n    }\n  };\n  const deleteTask = async id => {\n    try {\n      const response = await axiosInstance.delete(`/api/tasks/entries/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      throw error;\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      logout,\n      fetchCalendarEntries,\n      addCalendarEntry,\n      updateCalendarEntry,\n      deleteCalendarEntry,\n      categories,\n      addCategory,\n      fetchCategoryEntries,\n      fetchTasks,\n      addTask,\n      updateTask,\n      deleteTask,\n      deleteCategory\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"pd+ukgRrhso3M1ovtmLS0feEfhE=\");\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","decodeToken","v4","uuidv4","jsxDEV","_jsxDEV","AuthContext","axiosInstance","create","baseURL","AuthProvider","children","_s","user","setUser","loading","setLoading","categories","setCategories","token","localStorage","getItem","defaults","headers","common","decodedToken","username","error","console","logout","loadCategories","localCategories","JSON","parse","log","fetchCategories","response","get","categoryData","data","setItem","stringify","login","password","post","register","removeItem","fetchCalendarEntries","fetchCategoryEntries","addCalendarEntry","entry","addCategory","category","newCategory","id","prevCategories","updatedCategories","updateCalendarEntry","put","deleteCalendarEntry","delete","deleteCategory","filter","fetchTasks","addTask","updateTask","deleteTask","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","$RefreshReg$"],"sources":["C:/Users/helwes04/Documents/GitHub/workoutproject/frontend2/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { decodeToken } from '../utils/decodeToken';\r\nimport { v4 as uuidv4 } from 'uuid'; // Import UUID for generating unique IDs\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:3000', // Set your base URL here\r\n});\r\n\r\nconst AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState();\r\n    const [loading, setLoading] = useState(true);\r\n    const [categories, setCategories] = useState([]); // Initialize as an array\r\n\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n            try {\r\n                const decodedToken = decodeToken(token);\r\n                setUser({ username: decodedToken.username });\r\n            } catch (error) {\r\n                console.error('Invalid token:', error);\r\n                logout();\r\n            }\r\n        }\r\n        setLoading(false);\r\n        loadCategories(); // Load categories when the component mounts\r\n    }, []);\r\n\r\n    const loadCategories = async () => {\r\n        const localCategories = localStorage.getItem('categoryEntries');\r\n        if (localCategories) {\r\n            setCategories(JSON.parse(localCategories));\r\n        } else {\r\n            console.log('Fetching categories from the server');\r\n        }\r\n    };\r\n\r\n    const fetchCategories = async () => {\r\n        try {\r\n            const response = await axiosInstance.get('/api/categories/entries');\r\n            const categoryData = response.data || [];\r\n            setCategories(categoryData); // Ensure the response is an array\r\n            localStorage.setItem('categoryEntries', JSON.stringify(categoryData));\r\n        } catch (error) {\r\n            console.error('Error fetching categories:', error);\r\n            setCategories([]); // Fallback to an empty array on error\r\n        }\r\n    };\r\n\r\n    const login = async (username, password) => {\r\n        try {\r\n            const response = await axiosInstance.post('/api/auth/login', { username, password });\r\n            const token = response.data.token;\r\n            localStorage.setItem('token', token);\r\n            axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n            const decodedToken = decodeToken(token);\r\n            setUser({ username: decodedToken.username });\r\n        } catch (error) {\r\n            console.error('Login error:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const register = async (username, password) => {\r\n        try {\r\n            await axiosInstance.post('/api/auth/register', { username, password });\r\n        } catch (error) {\r\n            console.error('Registration error:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('token');\r\n        delete axiosInstance.defaults.headers.common['Authorization'];\r\n        setUser(null);\r\n    };\r\n\r\n    const fetchCalendarEntries = async () => {\r\n        try {\r\n            const response = await axiosInstance.get('/api/calendar/entries');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching calendar entries:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const fetchCategoryEntries = async () => {\r\n        try {\r\n            const response = await axiosInstance.get('/api/categories/entries');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching category entries:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const addCalendarEntry = async (entry) => {\r\n        console.log('entry:', entry);\r\n        try {\r\n            const response = await axiosInstance.post('/api/calendar/entries', entry);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error adding calendar entry:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const addCategory = async (category) => {\r\n        const newCategory = { ...category, id: uuidv4() };\r\n        try {\r\n            const response = await axiosInstance.post('/api/categories/entries', newCategory);\r\n            setCategories(prevCategories => {\r\n                const updatedCategories = [...prevCategories, response.data];\r\n                localStorage.setItem('categoryEntries', JSON.stringify(updatedCategories));\r\n                return updatedCategories;\r\n            }); // Update the categories state\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error adding category:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const updateCalendarEntry = async (id, entry) => {\r\n        try {\r\n            const response = await axiosInstance.put(`/api/calendar/entries/${id}`, entry);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error updating calendar entry:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const deleteCalendarEntry = async (id) => {\r\n        try {\r\n            const response = await axiosInstance.delete(`/api/calendar/entries/${id}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error deleting calendar entry:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const deleteCategory = async (id) => {\r\n        try {\r\n            const response = await axiosInstance.delete(`/api/categories/entries/${id}`);\r\n            setCategories(prevCategories => {\r\n                const updatedCategories = prevCategories.filter(category => category.id !== id);\r\n                localStorage.setItem('categoryEntries', JSON.stringify(updatedCategories));\r\n                return updatedCategories;\r\n            }); // Update the categories state\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error deleting category:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const fetchTasks = async () => {\r\n        try {\r\n            const response = await axiosInstance.get('/api/tasks/entries');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching tasks:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const addTask = async (entry) => {\r\n        console.log('entry:', entry);\r\n        try {\r\n            const response = await axiosInstance.post('/api/tasks/entries', entry);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error adding task:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const updateTask = async (id, entry) => {\r\n        try {\r\n            const response = await axiosInstance.put(`/api/tasks/entries/${id}`, entry);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error updating task:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const deleteTask = async (id) => {\r\n        try {\r\n            const response = await axiosInstance.delete(`/api/tasks/entries/${id}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error deleting task:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ user, login, register, logout, fetchCalendarEntries, addCalendarEntry, updateCalendarEntry, deleteCalendarEntry, categories, addCategory, fetchCategoryEntries, fetchTasks, addTask, updateTask, deleteTask, deleteCategory }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AuthContext, AuthProvider };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}